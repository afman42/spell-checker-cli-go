name: build

permissions: {} # no need any permissions

on:
  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: true
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3

      - name: Go Test All File
        run: go test *.go -v

      - name: Go Build For Linux amd64
        run: GOOS=linux GOARCH=amd64 go build -ldflags="-s" -o=./bin/linux_amd64/tmp/spellchecker ./*.go;

      - name: Make Directory Temporary
        run: mkdir ./tmp/

      - name: Testing App CLI And Scan a directory with default settings
        continue-on-error: true
        run: ./bin/linux_amd64/tmp/spellchecker -output "./tmp/scan-a-directory-with-default-settings.txt" ./test/

      - name: Testing App CLI And Scan a single file
        continue-on-error: true
        run: ./bin/linux_amd64/tmp/spellchecker -output "./tmp/scan-a-single-file.txt" ./test/kafka.txt

      - name: Testing App CLI And Scan with exclusions and verbose output
        continue-on-error: true
        run: ./bin/linux_amd64/tmp/spellchecker -exclude "*.pdf,*.tmp,bin/" -output "./tmp/scan-with-exclusions-and-verbose-output.txt" --verbose ./test/

      - name: Testing App CLI And Use a personal dictionary to allow specific jargon
        continue-on-error: true
        run: |
          touch .project-words.txt
          echo -e "Qopper\nFluxCapacitor\n# This is a comment\nbigcorp-api\nGregor\nSamsa" >> .project-words.txt
          ./bin/linux_amd64/tmp/spellchecker -personal-dict ".project-words.txt" -output "./tmp/use-a-personal-dictionary-to-allow-specific-jargon.txt" ./test/kafka.txt

      - name: Testing App CLI And Generate a single HTML report file (by extension)
        continue-on-error: true
        run: ./bin/linux_amd64/tmp/spellchecker -exclude "*.pdf,*.tmp,bin/" -output "./tmp/generate-a-single-HTML-report-file.html" ./test/

      - name: Testing App CLI And Multi-File HTML Reports
        continue-on-error: true
        run: ./bin/linux_amd64/tmp/spellchecker -format html -output "./tmp/multi-file-html-reports/" ./test/

      - name: Upload Folder Temporary
        uses: actions/upload-artifact@v4
        with:
          name: testing-folder-temporary
          path: ./tmp/
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: true
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3

      - name: Install Lib Wget
        run: sudo apt update && sudo apt install wget

      - name: Download UPX And Extract Folder
        run: wget https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-amd64_linux.tar.xz && tar -xf upx-5.0.2-amd64_linux.tar.xz

      - name: Go Build For Linux amd64
        run: GOOS=linux GOARCH=amd64 go build -ldflags="-s" -o=./bin/linux_amd64/tmp/spellchecker ./*.go;

      - name: Go Build For Windows amd64
        run: GOOS=windows GOARCH=amd64 go build -ldflags="-s" -o=./bin/windows_amd64/tmp/spellchecker.exe ./*.go;

      - name: Compress Linux
        run: ./upx-5.0.2-amd64_linux/upx ./bin/linux_amd64/tmp/spellchecker -o ./bin/linux_amd64/spellchecker-linux-amd64;

      - name: Compress Windows
        run: ./upx-5.0.2-amd64_linux/upx ./bin/windows_amd64/tmp/spellchecker.exe -o ./bin/windows_amd64/spellchecker-windows-amd64.exe;

      - name: Upload File Spell Checker Linux amd64
        uses: actions/upload-artifact@v4
        with:
          name: spell-checker-linux-amd64
          path: ./bin/linux_amd64/spellchecker-linux-amd64

      - name: Upload File Spell Checker Windows amd64
        uses: actions/upload-artifact@v4
        with:
          name: spell-checker-windows-amd64
          path: ./bin/windows_amd64/spellchecker-windows-amd64.exe
